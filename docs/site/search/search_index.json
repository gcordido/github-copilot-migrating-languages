{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Real World Code Migration with GitHub Copilot Agent Mode","text":""},{"location":"#a-50-minute-interactive-workshop","title":"A 50-minute interactive workshop","text":""},{"location":"#perform-a-challenging-migration-to-a-completely-different-language","title":"Perform a challenging migration to a completely different language","text":"<ul> <li>Who is this for: Any technologist that is looking to apply AI pair-programming techniques with GitHub Copilot to perform challenging work like migrating or translating from one programming language to another.</li> <li>What you'll learn: You'll use advanced GitHub Copilot techniques that are specifically useful when translating projects in different programming languages, as well as the different modes GitHub Copilot has to offer.</li> <li>What you'll build: An HTTP API that uses Rust with full compatibility from the original HTTP API written in Python.</li> </ul>"},{"location":"#learning-objectives","title":"Learning Objectives","text":"<p>In this workshop, you will:</p> <ul> <li>Learn the differences about each of GitHub Copilot Modes, when to use each one, best practices and tools to help you get the most out of your interactions.</li> <li>Understand the Differences Between Python and Rust for Web Development   Learn the key differences in syntax, libraries, and frameworks when transitioning from Python's FastAPI to Rust's actix-web.</li> <li>Implement JSON Serialization and Deserialization in Rust   Gain hands-on experience using the serde library to handle JSON data, ensuring compatibility with the original Python API.</li> <li>Develop and Validate Incremental Endpoints in Rust   Practice creating and testing individual endpoints iteratively, ensuring correctness and alignment with the original Python API.</li> <li>Optimize Performance and Identify Bottlenecks in Rust   Learn to analyze and address potential performance issues, such as redundant file serialization, while building a production-ready Rust application.</li> </ul>"},{"location":"#mega-prerequisites","title":":mega: Prerequisites","text":"<p>Before joining the workshop, there is only one prerequisite: you must have a public GitHub account. All resources, dependencies, and data are part of the repository itself. Make sure you have your GitHub Copilot license, trial, or the free version.</p> <p>Let's get started!</p>"},{"location":"Challenge-1/","title":"Bonus Challenges","text":"<p>Ready for an extra challenge? This section presents advanced scenarios that will push the boundaries of what you have so far accomplished.</p>"},{"location":"Challenge-1/#challenge-1-containerizing-the-project","title":"Challenge 1: Containerizing the project","text":"<p>Containerize this project so that users can run it in other environments without having to install and compile dependencies.</p> <p>You can start with Agent mode to create the Dockerfile, then switch over to Edit mode when making updates to the Dockerfile. Finally, switch over to Agent mode to get guidance verifying the container.</p> <ol> <li>Ask Copilot to help you generate a Dockerfile to containerize the Rust    project</li> <li>Review the Dockerfile created, optionally switch to Edit mode to make    specific changes to the file</li> <li>Use Agent mode to verify the container builds and can run</li> </ol> <p>Make adjustments as needed to ensure the container works.</p>"},{"location":"Challenge-2/","title":"Bonus Challenges","text":""},{"location":"Challenge-2/#challenge-2-creating-a-makefile-to-interact-with-the-rust-project","title":"Challenge 2: Creating a Makefile to interact with the Rust project.","text":"<p>[!NOTE] You may have a <code>Makefile</code> already created by Copilot as part of this workshop. If that is the case, just make the updates necessary, otherwise create a new one.</p> <p>Create a useful <code>Makefile</code> to make it easier to interact with the Rust project. Use GitHub Copilot in Agent mode for this challenge. Use Agent mode to achieve the following:</p> <ol> <li>Create a Makefile with build, build-container, test, and run targets</li> <li>Make the <code>Makefile</code> produce a useful help menu when no targets are passed in</li> <li>Explore additional targets like release-build and similar that GitHub    Copilot might suggest in Ask mode</li> </ol>"},{"location":"Homework/","title":"Homework","text":"<p>Congratulations on completing the workshop! To solidify your learning and explore additional concepts, here are some homework exercises and extended projects.</p>"},{"location":"Homework/#take-home-challenge-deploying-the-application-on-azure","title":"Take Home Challenge: Deploying the application on Azure","text":"<p>If you have achieved all previous steps including the containerization, try deploying your application on Azure. For this you will need an Azure account and the GitHub Copilot for Azure extension which will help you ask questions and get guidance for deployment.</p> <ol> <li>Use <code>@azure</code> after signing into your Azure account to ask how to deploy the    containerized Rust application</li> <li>Use one of the suggested services for deployment, for example, Azure    Container Apps, to deploy the container</li> <li>Verify your container is deployed and working</li> </ol> <p>By the end, ensure you cleanup and remove any and all resources to prevent unneeded cloud charges to your account.</p>"},{"location":"about/","title":"About This Workshop","text":""},{"location":"about/#workshop-overview","title":"Workshop Overview","text":"<p>The \"Real World Code Migration with GitHub Copilot\" workshop is designed to provide hands-on experience in migrating applications between programming languages using AI-assisted development tools. This workshop combines practical software engineering skills with modern AI-powered development techniques.</p>"},{"location":"about/#learning-objectives","title":"Learning Objectives","text":"<p>By completing this workshop, participants will:</p> <ul> <li>Master systematic migration strategies for converting applications between programming languages</li> <li>Develop proficiency in Rust programming for building high-performance web applications</li> <li>Learn to leverage GitHub Copilot effectively for accelerated learning and development</li> <li>Understand performance optimization techniques and comparative analysis between languages</li> <li>Practice modern software engineering workflows including testing, validation, and deployment strategies</li> </ul>"},{"location":"about/#target-audience","title":"Target Audience","text":"<p>This workshop is designed for:</p> <ul> <li>Software developers with basic programming experience</li> <li>Engineers interested in Rust who want practical, project-based learning</li> <li>Teams considering language migration for performance or maintainability reasons</li> <li>Developers exploring AI-assisted development with GitHub Copilot</li> <li>Students and professionals seeking hands-on systems programming experience</li> </ul>"},{"location":"about/#prerequisites","title":"Prerequisites","text":"<ul> <li>Basic understanding of programming concepts</li> <li>Familiarity with at least one programming language</li> <li>Experience with command-line tools and Git</li> <li>Access to GitHub Copilot (recommended but not required)</li> </ul>"},{"location":"about/#workshop-structure","title":"Workshop Structure","text":""},{"location":"about/#phase-1-foundation-30-45-minutes","title":"Phase 1: Foundation (30-45 minutes)","text":"<ul> <li>Understanding the existing Python application</li> <li>Setting up the development environment</li> <li>Introduction to GitHub Copilot for migration tasks</li> </ul>"},{"location":"about/#phase-2-migration-planning-45-60-minutes","title":"Phase 2: Migration Planning (45-60 minutes)","text":"<ul> <li>Analyzing the codebase systematically</li> <li>Identifying migration challenges and opportunities</li> <li>Creating comprehensive test coverage</li> </ul>"},{"location":"about/#phase-3-implementation-90-120-minutes","title":"Phase 3: Implementation (90-120 minutes)","text":"<ul> <li>Setting up Rust project structure</li> <li>Implementing equivalent functionality</li> <li>Validating correctness and performance</li> </ul>"},{"location":"about/#phase-4-enhancement-60-90-minutes","title":"Phase 4: Enhancement (60-90 minutes)","text":"<ul> <li>Adding new features and improvements</li> <li>Performance optimization</li> <li>Advanced testing strategies</li> </ul>"},{"location":"about/#phase-5-advanced-challenges-optional","title":"Phase 5: Advanced Challenges (Optional)","text":"<ul> <li>Complex architectural patterns</li> <li>Production-ready enhancements</li> <li>Real-world deployment considerations</li> </ul>"},{"location":"about/#technology-stack","title":"Technology Stack","text":""},{"location":"about/#source-application-python","title":"Source Application (Python)","text":"<ul> <li>FastAPI - Modern Python web framework</li> <li>JSON - Data format and API responses</li> <li>pytest - Testing framework</li> <li>uvicorn - ASGI server</li> </ul>"},{"location":"about/#target-application-rust","title":"Target Application (Rust)","text":"<ul> <li>Axum - Ergonomic web framework</li> <li>Tokio - Async runtime</li> <li>Serde - Serialization framework</li> <li>Cargo - Package manager and build tool</li> </ul>"},{"location":"about/#development-tools","title":"Development Tools","text":"<ul> <li>GitHub Copilot - AI programming assistant</li> <li>VS Code - Recommended development environment</li> <li>Git - Version control</li> <li>curl/Postman - API testing</li> </ul>"},{"location":"about/#workshop-philosophy","title":"Workshop Philosophy","text":""},{"location":"about/#learning-by-doing","title":"Learning by Doing","text":"<p>This workshop emphasizes practical, hands-on experience over theoretical knowledge. Participants build real applications and solve actual problems encountered in language migration projects.</p>"},{"location":"about/#ai-augmented-learning","title":"AI-Augmented Learning","text":"<p>Rather than replacing traditional learning methods, this workshop demonstrates how AI tools like GitHub Copilot can accelerate skill acquisition and improve development productivity.</p>"},{"location":"about/#real-world-relevance","title":"Real-World Relevance","text":"<p>All exercises and challenges are based on scenarios commonly encountered in professional software development, ensuring skills transfer directly to workplace projects.</p>"},{"location":"about/#progressive-complexity","title":"Progressive Complexity","text":"<p>The workshop is structured to build skills incrementally, starting with basic concepts and advancing to enterprise-grade architectural patterns.</p>"},{"location":"about/#authors-and-contributors","title":"Authors and Contributors","text":""},{"location":"about/#primary-authors","title":"Primary Authors","text":"<p>Alfredo Deza - Senior Cloud Advocate at Microsoft - Expert in Python, DevOps, and cloud technologies - Author of multiple technical books and courses - Extensive experience in software architecture and migration projects</p> <p>Gustavo Cordido - Cloud Solution Architect at Microsoft - Specialist in modern application development and AI - Expert in developer tools and productivity enhancement - Focus on practical AI applications in software engineering</p>"},{"location":"about/#contributors","title":"Contributors","text":"<ul> <li>Microsoft Developer Relations Team</li> <li>GitHub Copilot Product Team</li> <li>Rust Community Contributors</li> <li>Workshop Beta Testers and Reviewers</li> </ul>"},{"location":"about/#workshop-development","title":"Workshop Development","text":""},{"location":"about/#design-principles","title":"Design Principles","text":"<ol> <li>Hands-on Learning: Every concept is reinforced through practical exercises</li> <li>Real-world Applicability: Scenarios mirror actual migration projects</li> <li>Incremental Complexity: Skills build progressively from basic to advanced</li> <li>AI Integration: Demonstrates effective use of AI-assisted development</li> <li>Community Focus: Encourages participation in open-source ecosystems</li> </ol>"},{"location":"about/#continuous-improvement","title":"Continuous Improvement","text":"<p>This workshop is continuously updated based on: - Participant feedback and suggestions - Evolution of the Rust ecosystem - Improvements in GitHub Copilot capabilities - Real-world migration case studies - Community contributions and best practices</p>"},{"location":"about/#educational-approach","title":"Educational Approach","text":""},{"location":"about/#socratic-method","title":"Socratic Method","text":"<p>The workshop uses guided discovery, encouraging participants to explore solutions with AI assistance rather than providing prescriptive instructions.</p>"},{"location":"about/#error-driven-learning","title":"Error-Driven Learning","text":"<p>Participants encounter and resolve common migration challenges, building problem-solving skills and resilience.</p>"},{"location":"about/#peer-learning","title":"Peer Learning","text":"<p>Group exercises and discussions facilitate knowledge sharing and different perspective integration.</p>"},{"location":"about/#reflection-and-analysis","title":"Reflection and Analysis","text":"<p>Regular reflection points help participants understand not just \"how\" but \"why\" certain approaches are effective.</p>"},{"location":"about/#workshop-impact","title":"Workshop Impact","text":""},{"location":"about/#skills-development","title":"Skills Development","text":"<ul> <li>Cross-language development capabilities</li> <li>Modern Rust programming proficiency</li> <li>AI-assisted development workflows</li> <li>Performance optimization techniques</li> <li>Systems thinking and architecture design</li> </ul>"},{"location":"about/#career-advancement","title":"Career Advancement","text":"<ul> <li>Relevant skills for high-performance systems roles</li> <li>Understanding of modern development tools and practices</li> <li>Experience with emerging technologies and paradigms</li> <li>Portfolio projects demonstrating technical capability</li> </ul>"},{"location":"about/#industry-relevance","title":"Industry Relevance","text":"<ul> <li>Migration strategies used by major technology companies</li> <li>Skills applicable to cloud-native development</li> <li>Understanding of performance-critical system design</li> <li>Experience with production-ready development practices</li> </ul>"},{"location":"about/#support-and-community","title":"Support and Community","text":""},{"location":"about/#during-the-workshop","title":"During the Workshop","text":"<ul> <li>Instructor guidance and support</li> <li>Peer collaboration and discussion</li> <li>GitHub Copilot assistance for learning acceleration</li> <li>Comprehensive documentation and resources</li> </ul>"},{"location":"about/#after-the-workshop","title":"After the Workshop","text":"<ul> <li>Access to workshop materials and updates</li> <li>Connection to Rust and migration communities</li> <li>Continued learning resources and pathways</li> <li>Opportunities for advanced workshops and specialization</li> </ul>"},{"location":"about/#community-contributions","title":"Community Contributions","text":"<p>Participants are encouraged to: - Share their migration experiences - Contribute to open-source projects - Mentor others learning Rust or migration techniques - Provide feedback for workshop improvements</p>"},{"location":"about/#technical-requirements","title":"Technical Requirements","text":""},{"location":"about/#hardware-requirements","title":"Hardware Requirements","text":"<ul> <li>Modern laptop or desktop computer</li> <li>At least 8GB RAM (16GB recommended)</li> <li>10GB available disk space</li> <li>Stable internet connection</li> </ul>"},{"location":"about/#software-requirements","title":"Software Requirements","text":"<ul> <li>Git version control system</li> <li>VS Code or similar code editor</li> <li>GitHub account with Copilot access (recommended)</li> <li>Terminal/command line access</li> <li>Web browser for testing and documentation</li> </ul>"},{"location":"about/#optional-tools","title":"Optional Tools","text":"<ul> <li>Docker for containerization exercises</li> <li>Postman or similar API testing tools</li> <li>Performance monitoring tools</li> <li>Database systems for advanced exercises</li> </ul>"},{"location":"about/#accessibility-and-inclusion","title":"Accessibility and Inclusion","text":""},{"location":"about/#accessibility-features","title":"Accessibility Features","text":"<ul> <li>Screen reader compatible materials</li> <li>Keyboard navigation support</li> <li>High contrast code examples</li> <li>Clear, descriptive documentation</li> </ul>"},{"location":"about/#inclusive-learning","title":"Inclusive Learning","text":"<ul> <li>Multiple learning style accommodation</li> <li>Flexible pacing options</li> <li>Diverse examples and use cases</li> <li>Supportive, welcoming environment</li> </ul>"},{"location":"about/#language-support","title":"Language Support","text":"<p>This workshop is primarily conducted in English, with materials available in multiple languages where possible.</p>"},{"location":"about/#feedback-and-improvement","title":"Feedback and Improvement","text":""},{"location":"about/#continuous-enhancement","title":"Continuous Enhancement","text":"<p>We actively seek feedback to improve the workshop experience: - Post-workshop surveys and evaluations - Ongoing community input and suggestions - Regular content updates and improvements - Integration of new tools and techniques</p>"},{"location":"about/#contact-information","title":"Contact Information","text":"<ul> <li>Workshop feedback: [workshop-feedback@example.com]</li> <li>Technical support: [technical-support@example.com]</li> <li>Community discussions: GitHub Discussions</li> </ul>"},{"location":"about/#license-and-usage","title":"License and Usage","text":"<p>This workshop content is available under the MIT License, encouraging: - Educational use and adaptation - Community contributions and improvements - Commercial training applications - Open-source collaboration</p>"},{"location":"about/#acknowledgments","title":"Acknowledgments","text":""},{"location":"about/#special-thanks","title":"Special Thanks","text":"<ul> <li>The Rust Foundation and community for language development</li> <li>GitHub for Copilot technology and support</li> <li>Microsoft for educational resource support</li> <li>Workshop participants for feedback and contributions</li> <li>Open-source contributors whose tools make this workshop possible</li> </ul>"},{"location":"about/#technology-partners","title":"Technology Partners","text":"<ul> <li>GitHub - AI-powered development tools</li> <li>Microsoft - Cloud and development platform support</li> <li>Rust Foundation - Language and ecosystem development</li> <li>Community Contributors - Documentation, tools, and feedback</li> </ul> <p>This workshop represents the collaborative effort of many individuals and organizations committed to advancing software development education and AI-assisted programming. We hope it provides valuable learning experiences and contributes to your professional development journey.</p> <p>For the most up-to-date information about this workshop, please visit our GitHub repository.</p>"},{"location":"add-more-endpoints-tests/","title":"Add More Endpoints and Tests","text":""},{"location":"add-more-endpoints-tests/#11-finalizing-the-project-with-rust-tests","title":"11. Finalizing the project with Rust tests","text":"<p>Now that you have all the endpoints and tests passing, you can now use Rust tests to validate the correctness. The shell tests were good enough to validate both Python and Rust by using the HTTP API. But now you can use Rust tests to validate the correctness of the Rust project using its own tests.</p> <ul> <li>Ask Copilot where you can add tests for the Rust project. Tests can go in the same <code>main.rs</code> file or in a separate file.</li> <li>Ask how to run the tests for validation</li> <li>Only add one test a time and validate it. This is the same process as before and will help you concentrate in one thing at a time.</li> </ul> Tip  ##### Prompt (Agent Mode)  <pre><code>Now that we have all endpoints in Rust I want native Rust unit tests. Add them\nto main.rs so that I can verify correctness without having to use the BASH file\n</code></pre> <p>You should have a fully operating Rust application that is well tested by now. If you are reaching this point, congratulations! You can try achieving these tasks before time runs out or try them on your own time later.</p>"},{"location":"analyze-project/","title":"Analyze the Project","text":""},{"location":"analyze-project/#4-strategize-with-github-copilot","title":"4. Strategize with GitHub Copilot","text":"<p>Try using GitHub Copilot in Ask Mode for this step.</p> <p>Now that you have a good understanding of the project, you can start strategizing with GitHub Copilot. Using Ask Mode, ask questions about why the tests might be a good idea when rewriting the project in Rust.</p> <ul> <li>Ask GitHub Copilot to provide a summary of the tests</li> <li>Ask for suggestions on how to properly rewrite this project in Rust</li> </ul> <p>[!NOTE] Sometimes, GitHub Copilot may be eager to provide a lot of information including whole files with code. This is probably not what you want when trying to think about your options. Ensure you tell Copilot to avoid generating code when brainstorming and strategizing.</p> Tip  ##### Prompt (Ask Mode)  <pre><code>#codebase why are these tests using BASH a good idea if I want to rewrite the\napplication from Python to Rust?\n</code></pre>"},{"location":"analyze-project/#5-identify-missing-tests","title":"5. Identify missing tests","text":"<p>For this step you can use either Edit Mode or Agent Mode.</p> <p>The tests are not complete and there are some missing cases. Use GitHub Copilot to identify the missing tests. This will help you get full coverage of the application before you start rewriting it in Rust.</p> <p>For this step, you can use either Edit Mode or Agent Mode.</p> <ul> <li>Open the test file and ask GitHub Copilot to identify missing tests</li> <li>Implement the missing tests</li> <li>Run the tests to ensure they are passing, fix any issues that arise</li> </ul> Tip  ##### Prompt (Edit Mode)  <pre><code>Add any missing tests for the endpoints. There are missing cases. Help me get\ncoverage\n</code></pre>  ##### Prompt (Agent Mode)  <pre><code>Help me run the tests using the BASH file and check that they pass. In case of\nfailure, help me address the failures to get the tests passing\n</code></pre>"},{"location":"create-rust-scaffolding/","title":"Create Rust Scaffolding","text":"<p>You should use GitHub Copilot in Agent Mode for this step and onwards.</p> <p>Now that you have a good understanding of the project and its tests, you can start creating the Rust scaffolding. You will start by creating a special file with instructions. This file is called Copilot Instructions and it should live in the root of the current repository. We've pre-created an empty file for you so all that is needed is to fill it out with new instructions.</p> <p>For this step, open the <code>.github/copilot-instructions.md</code> file and add the following:</p> <pre><code>Whenever you are providing suggestions for a Rust project always use the\nactix-web framework using serde for serialization\n</code></pre> <p>As we will carry out a more complex set of tasks, we will move on from Edit Mode and solely work in Agent Mode. Once you have switched, ask GitHub Copilot to create the scaffolding necessary for your Rust project. Ask GitHub Copilot to give you a step by step to start the project and the commands to run to get started.</p> <p>The framework and the serializer should automatically be included without you having to specify it. This file can be used for any other instruction you don't want to repeat.</p> <p>[!NOTE] Why the dependencies might not fully work? Because LLMs sometimes don't have correct versions and tend to provide probabilistic results, not exact ones like a database would. Ensure that the versions used and installed will work and are correct.</p>"},{"location":"implementing-endpoints/","title":"Implementing Endpoints","text":"<p>Now that you have the scaffolding, you can start creating a single endpoint. Use Copilot to suggest the first pass for the <code>main.rs</code> file that will hold your first endpoint. Ensure that Copilot understands that it shouldn't generate the whole file, but only the main <code>/</code> endpoint.</p>"},{"location":"implementing-endpoints/#6-create-a-single-endpoint","title":"6. Create a single endpoint","text":"<ul> <li>Open the <code>main.rs</code> file and ask Copilot to generate only the <code>/</code> endpoint</li> </ul> <p>[!NOTE] You might be tempted to ask Copilot to generate the whole file, but you must validate each part as you make progress. It is easier to validate smaller parts than a whole file with multiple endpoints and logic.</p> Tip  ##### Prompt (Agent Mode)  <pre><code>#codebase add the root of the API only. This is the '/' endpoint, do not\ngenerate other endpoints yet, focus only on the single root endpoint for now.\n</code></pre>"},{"location":"implementing-endpoints/#7-validate-your-first-rust-endpoint","title":"7. Validate your first Rust endpoint","text":"<p>Now that you have the first endpoint in Rust, it is time to validate. This process of creating code and validating it is iterative and a solid practice when you need to develop a new project. It is even more crucial now that you are rewriting a project in a new language.</p> <ul> <li>Make sure the Python project is no longer running</li> <li>Ask Copilot help to run the Rust project in the same address and port as the Python project so that tests can run</li> <li>Run the tests to ensure they are passing, fix any issues that arise</li> </ul> Tip  ##### Prompt (Agent Mode)  <pre><code>Run the Rust project in the same address and port as the Python one. Make sure\nthe Python API is no longer running. Then, run the BASH tests so that I can\nverify the first endpoint in Rust is working. Only focus on the \"/\" endpoint\nfor now\n</code></pre>"},{"location":"implementing-endpoints/#8-continue-with-all-other-endpoints","title":"8. Continue with all other endpoints","text":"<p>Use the same process as above to create all other endpoints. Add a single endpoint at a time, validate it, and run the tests.</p> <p>For the JSON file, you will need to serialize and use <code>serde</code>. If you aren't familiar with this process you will have to rely on Copilot guidance. Ensure that you generate the smallest possible code and validate it immediately.</p> <p>[!TIP] Validating smaller parts of the code is easier than validating a whole file. It is also easier to debug smaller parts of the code. This is a good practice when using GitHub Copilot and it will help you in the long run.</p>"},{"location":"navigating-workshop/","title":"Workshop Navigation","text":"<p>Take a moment to familiarize yourself with the workshop document layout:</p>"},{"location":"navigating-workshop/#page-navigation-elements","title":"Page Navigation Elements","text":"<ul> <li>The main navigation menu on the left side contains links to all sections of the documentation.</li> <li>The control panel at the top allows you to search for specific topics or keywords, switch between light and dark themes, and access different language versions of the documentation.</li> <li>Link to the GitHub repository for this workshop is available in the top right corner.</li> <li>Navigation links at the bottom of each page for the next/previous pages.</li> </ul>"},{"location":"navigating-workshop/#expanding-an-image","title":"Expanding an Image","text":"<p>To view images in the documentation at a larger size, you can click on them. This will open the image in a new tab, allowing you to see more detail.</p> <p></p>"},{"location":"open-workshop/","title":"Open the Workshop","text":""},{"location":"open-workshop/#getting-started","title":"Getting Started","text":"<p>Welcome to the first step of our migration workshop! In this section, you'll learn how to access and set up the workshop environment.</p>"},{"location":"open-workshop/#prerequisites","title":"Prerequisites","text":"<p>Before we begin, make sure you have:</p> <ul> <li> GitHub account with Copilot access</li> <li> Basic familiarity with Git and GitHub</li> <li> Text editor or IDE (VS Code recommended)</li> <li> Terminal access</li> </ul>"},{"location":"open-workshop/#opening-the-workshop","title":"Opening the Workshop","text":"<ol> <li> <p>Clone the Repository <pre><code>git clone https://github.com/gcordido/github-copilot-migrating-languages.git\ncd github-copilot-migrating-languages\n</code></pre></p> </li> <li> <p>Open in Your Editor</p> </li> <li>Open the project in VS Code or your preferred editor</li> <li> <p>Ensure GitHub Copilot extension is installed and active</p> </li> <li> <p>Explore the Structure</p> </li> <li>Familiarize yourself with the project layout</li> <li>Look at the <code>workshop/</code> directory</li> <li>Review the Python application we'll be migrating</li> </ol>"},{"location":"open-workshop/#next-steps","title":"Next Steps","text":"<p>Once you have the workshop open, proceed to the Workshop Introduction to understand what we'll be building.</p>"},{"location":"resources/","title":"Resources","text":"<p>This page provides a comprehensive collection of resources to support your learning journey and help you become proficient in Rust development and code migration.</p>"},{"location":"resources/#official-rust-resources","title":"Official Rust Resources","text":""},{"location":"resources/#core-documentation","title":"Core Documentation","text":"<ul> <li>The Rust Programming Language Book - The definitive guide to Rust</li> <li>Rust by Example - Learn Rust through practical examples</li> <li>The Rust Reference - Detailed language specification</li> <li>The Rustonomicon - Advanced unsafe Rust guide</li> <li>Standard Library Documentation - Complete API reference</li> </ul>"},{"location":"resources/#learning-resources","title":"Learning Resources","text":"<ul> <li>Rustlings - Interactive Rust exercises</li> <li>Rust Cookbook - Common programming patterns</li> <li>Rust API Guidelines - Best practices for API design</li> </ul>"},{"location":"resources/#web-development-with-rust","title":"Web Development with Rust","text":""},{"location":"resources/#frameworks-and-libraries","title":"Frameworks and Libraries","text":""},{"location":"resources/#web-frameworks","title":"Web Frameworks","text":"<ul> <li>Axum - Ergonomic web framework (used in this workshop)</li> <li>Actix Web - Powerful, pragmatic web framework</li> <li>Warp - Composable web server framework</li> <li>Rocket - Type-safe web framework</li> <li>Tide - Modular web framework</li> </ul>"},{"location":"resources/#json-and-serialization","title":"JSON and Serialization","text":"<ul> <li>Serde - Serialization framework</li> <li>serde_json - JSON support for Serde</li> </ul>"},{"location":"resources/#async-runtime","title":"Async Runtime","text":"<ul> <li>Tokio - Async runtime for Rust</li> <li>async-std - Alternative async runtime</li> </ul>"},{"location":"resources/#database-integration","title":"Database Integration","text":"<ul> <li>SQLx - Async SQL toolkit</li> <li>Diesel - Safe, extensible ORM</li> <li>SeaORM - Async &amp; dynamic ORM</li> </ul>"},{"location":"resources/#http-clients","title":"HTTP Clients","text":"<ul> <li>reqwest - Easy HTTP client</li> <li>surf - Friendly HTTP client</li> </ul>"},{"location":"resources/#testing-and-development-tools","title":"Testing and Development Tools","text":""},{"location":"resources/#testing-frameworks","title":"Testing Frameworks","text":"<ul> <li>cargo test - Built-in testing framework</li> <li>criterion - Benchmarking library</li> <li>proptest - Property-based testing</li> <li>mockall - Mock object library</li> </ul>"},{"location":"resources/#development-tools","title":"Development Tools","text":"<ul> <li>Clippy - Linting tool</li> <li>Rustfmt - Code formatter</li> <li>Cargo - Package manager and build tool</li> <li>cargo-expand - Show macro expansions</li> <li>cargo-audit - Security vulnerability scanning</li> </ul>"},{"location":"resources/#github-copilot-resources","title":"GitHub Copilot Resources","text":""},{"location":"resources/#documentation","title":"Documentation","text":"<ul> <li>GitHub Copilot Documentation - Official documentation</li> <li>Copilot Best Practices - Usage guidelines</li> <li>Copilot in VS Code - IDE integration</li> </ul>"},{"location":"resources/#tips-for-effective-usage","title":"Tips for Effective Usage","text":"<ul> <li>Be specific in your comments - Clear intentions lead to better suggestions</li> <li>Provide context - Include relevant imports and type information</li> <li>Use descriptive function names - Help Copilot understand your intent</li> <li>Review suggestions carefully - Understand what's being suggested</li> <li>Iterate and refine - Use suggestions as starting points</li> </ul>"},{"location":"resources/#books-and-publications","title":"Books and Publications","text":""},{"location":"resources/#rust-programming-books","title":"Rust Programming Books","text":"<ul> <li>\"Programming Rust\" by Jim Blandy, Jason Orendorff, and Leonora F.S. Tindall - Comprehensive Rust guide</li> <li>\"Rust in Action\" by Tim McNamara - Systems programming with Rust</li> <li>\"Zero to Production in Rust\" by Luca Palmieri - Web development with Rust</li> <li>\"The Rust Programming Language\" by Steve Klabnik and Carol Nichols - Official Rust book</li> <li>\"Rust for Rustaceans\" by Jon Gjengset - Advanced Rust programming</li> </ul>"},{"location":"resources/#performance-and-systems-programming","title":"Performance and Systems Programming","text":"<ul> <li>\"High Performance Rust\" by Packt - Optimization techniques</li> <li>\"Systems Programming with Rust\" by Packt - Low-level programming</li> <li>\"Hands-On Concurrency with Rust\" by Brian L. Troutwine - Concurrent programming</li> </ul>"},{"location":"resources/#online-courses-and-tutorials","title":"Online Courses and Tutorials","text":""},{"location":"resources/#video-courses","title":"Video Courses","text":"<ul> <li>Rust Programming Course on Udemy - Various skill levels</li> <li>The Rust Programming Language on YouTube - Video tutorials</li> <li>Jon Gjengset's Rust Streams - Advanced Rust topics</li> </ul>"},{"location":"resources/#interactive-learning","title":"Interactive Learning","text":"<ul> <li>Rust Playground - Online Rust compiler</li> <li>Exercism Rust Track - Practice exercises with mentoring</li> <li>Codewars Rust Kata - Programming challenges</li> </ul>"},{"location":"resources/#community-and-support","title":"Community and Support","text":""},{"location":"resources/#forums-and-discussion","title":"Forums and Discussion","text":"<ul> <li>Rust Users Forum - Community support and discussion</li> <li>r/rust Subreddit - News and discussions</li> <li>Rust Discord - Real-time chat</li> <li>Stack Overflow Rust Tag - Q&amp;A</li> </ul>"},{"location":"resources/#blogs-and-news","title":"Blogs and News","text":"<ul> <li>This Week in Rust - Weekly newsletter</li> <li>The Rust Blog - Official announcements</li> <li>Read Rust - Curated Rust articles</li> <li>Rust Magazine - Community magazine</li> </ul>"},{"location":"resources/#conferences-and-events","title":"Conferences and Events","text":"<ul> <li>RustConf - Annual Rust conference</li> <li>Rust Belt Rust - Regional conference</li> <li>EuroRust - European Rust conference</li> <li>Local Rust Meetups - Check meetup.com for local groups</li> </ul>"},{"location":"resources/#migration-specific-resources","title":"Migration-Specific Resources","text":""},{"location":"resources/#migration-strategies","title":"Migration Strategies","text":"<ul> <li>Incremental Migration Patterns - Async migration strategies</li> <li>FFI Guidelines - Interfacing with other languages</li> <li>Bindgen - Generate Rust bindings for C libraries</li> </ul>"},{"location":"resources/#language-comparisons","title":"Language Comparisons","text":"<ul> <li>Rust vs. Python Performance - Performance comparisons</li> <li>From Python to Rust - Language comparison guide</li> <li>Rust vs. Go vs. Python - Detailed comparisons</li> </ul>"},{"location":"resources/#specialized-topics","title":"Specialized Topics","text":""},{"location":"resources/#async-programming","title":"Async Programming","text":"<ul> <li>Async Book - Comprehensive async guide</li> <li>Tokio Tutorial - Async runtime tutorial</li> <li>Async Patterns - Future combinators</li> </ul>"},{"location":"resources/#error-handling","title":"Error Handling","text":"<ul> <li>Error Handling in Rust - Official guide</li> <li>thiserror - Derive macro for error types</li> <li>anyhow - Flexible error handling</li> </ul>"},{"location":"resources/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>The Rust Performance Book - Performance optimization guide</li> <li>Flamegraph - Profiling tool</li> <li>Criterion - Benchmarking guide</li> </ul>"},{"location":"resources/#security","title":"Security","text":"<ul> <li>RustSec - Security advisory database</li> <li>Secure Rust Guidelines - Security best practices</li> <li>cargo-audit - Vulnerability scanner</li> </ul>"},{"location":"resources/#tools-and-ides","title":"Tools and IDEs","text":""},{"location":"resources/#ides-and-editors","title":"IDEs and Editors","text":"<ul> <li>VS Code with rust-analyzer - Recommended setup</li> <li>IntelliJ Rust - JetBrains IDE support</li> <li>Vim/Neovim with rust.vim - Vim configuration</li> <li>Emacs with rust-mode - Emacs configuration</li> </ul>"},{"location":"resources/#debugging-tools","title":"Debugging Tools","text":"<ul> <li>gdb - GNU Debugger with Rust support</li> <li>lldb - LLVM Debugger</li> <li>rr - Record and replay debugger</li> </ul>"},{"location":"resources/#crate-discovery","title":"Crate Discovery","text":""},{"location":"resources/#crate-registries","title":"Crate Registries","text":"<ul> <li>crates.io - Official crate registry</li> <li>lib.rs - Alternative crate browser</li> <li>docs.rs - Automatic documentation hosting</li> </ul>"},{"location":"resources/#popular-crates-by-category","title":"Popular Crates by Category","text":"<ul> <li>CLI Tools: clap, structopt, indicatif</li> <li>Networking: reqwest, hyper, quinn</li> <li>Cryptography: ring, rustls, sodiumoxide</li> <li>Data Processing: csv, regex, rayon</li> <li>Logging: log, env_logger, tracing</li> </ul>"},{"location":"resources/#migration-case-studies","title":"Migration Case Studies","text":""},{"location":"resources/#real-world-examples","title":"Real-World Examples","text":"<ul> <li>Discord's Rust Migration - Go to Rust migration</li> <li>Dropbox's File Storage Migration - Python to Rust migration</li> <li>npm's Performance Improvements - Node.js to Rust bindings</li> </ul>"},{"location":"resources/#migration-tools","title":"Migration Tools","text":"<ul> <li>py2rs - Python to Rust migration guide</li> <li>c2rust - C to Rust transpiler</li> <li>Corrode - C to Rust translator</li> </ul>"},{"location":"resources/#deployment-and-operations","title":"Deployment and Operations","text":""},{"location":"resources/#containerization","title":"Containerization","text":"<ul> <li>Docker Multi-stage Builds - Efficient Rust containers</li> <li>Distroless Images - Minimal container images</li> </ul>"},{"location":"resources/#cloud-deployment","title":"Cloud Deployment","text":"<ul> <li>AWS Lambda Rust Runtime - Serverless Rust</li> <li>Google Cloud Run - Container deployment</li> <li>Kubernetes Deployment - Container orchestration</li> </ul>"},{"location":"resources/#monitoring-and-observability","title":"Monitoring and Observability","text":"<ul> <li>tracing - Application-level tracing</li> <li>metrics - Metrics collection</li> <li>Prometheus Integration - Monitoring metrics</li> </ul>"},{"location":"resources/#contributing-to-the-ecosystem","title":"Contributing to the Ecosystem","text":""},{"location":"resources/#how-to-contribute","title":"How to Contribute","text":"<ul> <li>Contributing to Rust - Official contribution guide</li> <li>Good First Issues - Beginner-friendly tasks</li> <li>RFC Process - Language development process</li> </ul>"},{"location":"resources/#creating-crates","title":"Creating Crates","text":"<ul> <li>Cargo Book - Package creation guide</li> <li>Publishing Crates - How to publish</li> <li>Crate Best Practices - Quality guidelines</li> </ul>"},{"location":"resources/#stay-updated","title":"Stay Updated","text":""},{"location":"resources/#news-sources","title":"News Sources","text":"<ul> <li>This Week in Rust - Weekly updates</li> <li>Rust Blog - Official announcements</li> <li>Inside Rust - Development insights</li> </ul>"},{"location":"resources/#social-media","title":"Social Media","text":"<ul> <li>@rustlang on Twitter - Official Twitter account</li> <li>Rust LinkedIn - Professional updates</li> <li>YouTube Channels - Video content</li> </ul> <p>Remember: The Rust ecosystem is constantly evolving. These resources will help you stay current and continue growing as a Rust developer. Don't hesitate to ask questions in the community forums - the Rust community is known for being welcoming and helpful!</p>"},{"location":"resources/#getting-help","title":"Getting Help","text":"<p>When you need assistance: 1. Search existing resources - Often your question has been answered 2. Provide context - Include relevant code and error messages 3. Be specific - Clear questions get better answers 4. Show your research - Demonstrate what you've already tried 5. Give back - Help others when you can</p> <p>Happy learning and building with Rust! \ud83e\udd80</p>"},{"location":"summary/","title":"Workshop Summary","text":"<p>Congratulations! You've completed the Real World Code Migration with GitHub Copilot workshop. This summary reviews what you've accomplished and provides guidance for your continued journey.</p>"},{"location":"summary/#what-youve-achieved","title":"What You've Achieved","text":""},{"location":"summary/#core-skills-developed","title":"Core Skills Developed","text":"<ol> <li>Migration Strategy</li> <li>Analyzed existing Python codebase</li> <li>Planned systematic migration approach</li> <li>Identified key components and dependencies</li> <li> <p>Executed step-by-step conversion process</p> </li> <li> <p>Rust Programming</p> </li> <li>Built web applications with Axum</li> <li>Implemented async request handling</li> <li>Created robust error handling systems</li> <li> <p>Developed comprehensive test suites</p> </li> <li> <p>GitHub Copilot Mastery</p> </li> <li>Used AI assistance for code generation</li> <li>Leveraged Copilot for learning new concepts</li> <li>Applied AI-driven debugging techniques</li> <li> <p>Optimized development workflow with AI</p> </li> <li> <p>Software Engineering Practices</p> </li> <li>Test-driven development approach</li> <li>Performance validation and benchmarking</li> <li>Code quality and maintainability</li> <li>Documentation and best practices</li> </ol>"},{"location":"summary/#technical-accomplishments","title":"Technical Accomplishments","text":"<ul> <li>\u2705 Migrated a Python FastAPI application to Rust</li> <li>\u2705 Implemented identical API functionality</li> <li>\u2705 Achieved functional equivalence validation</li> <li>\u2705 Created comprehensive test coverage</li> <li>\u2705 Enhanced the application with new features</li> <li>\u2705 Optimized performance and resource usage</li> </ul>"},{"location":"summary/#key-learning-outcomes","title":"Key Learning Outcomes","text":""},{"location":"summary/#language-migration-principles","title":"Language Migration Principles","text":"<ol> <li>Systematic Approach</li> <li>Understanding before changing</li> <li>Incremental implementation</li> <li>Continuous validation</li> <li> <p>Risk mitigation strategies</p> </li> <li> <p>Cross-Language Concepts</p> </li> <li>Data structure translation</li> <li>Error handling patterns</li> <li>Async programming models</li> <li> <p>Testing methodologies</p> </li> <li> <p>AI-Assisted Development</p> </li> <li>Effective prompt engineering</li> <li>Code generation strategies</li> <li>Learning acceleration techniques</li> <li>Quality assurance with AI</li> </ol>"},{"location":"summary/#rust-specific-knowledge","title":"Rust-Specific Knowledge","text":"<ol> <li>Ownership and Borrowing</li> <li>Memory safety without garbage collection</li> <li>Zero-cost abstractions</li> <li>Compile-time guarantees</li> <li> <p>Performance implications</p> </li> <li> <p>Web Development in Rust</p> </li> <li>Axum framework usage</li> <li>JSON serialization with Serde</li> <li>Async/await patterns</li> <li> <p>Error handling with Result types</p> </li> <li> <p>Ecosystem Understanding</p> </li> <li>Cargo package management</li> <li>Crate selection and evaluation</li> <li>Community best practices</li> <li>Performance optimization techniques</li> </ol>"},{"location":"summary/#comparative-analysis","title":"Comparative Analysis","text":""},{"location":"summary/#python-vs-rust-key-differences","title":"Python vs. Rust: Key Differences","text":"Aspect Python Rust Type Safety Dynamic typing Static typing with inference Memory Management Garbage collection Ownership system Performance Interpreted, slower Compiled, faster Concurrency GIL limitations Fearless concurrency Error Handling Exceptions Result types Development Speed Rapid prototyping Longer initial development Runtime Safety Runtime errors possible Compile-time safety checks"},{"location":"summary/#when-to-choose-each-language","title":"When to Choose Each Language","text":"<p>Choose Python when: - Rapid prototyping is needed - Machine learning and data science - Scripting and automation - Large ecosystem of libraries required - Team has strong Python expertise</p> <p>Choose Rust when: - Performance is critical - Memory safety is important - System-level programming needed - Concurrent/parallel processing required - Long-term maintenance is priority</p>"},{"location":"summary/#real-world-applications","title":"Real-World Applications","text":""},{"location":"summary/#migration-success-stories","title":"Migration Success Stories","text":"<p>Your workshop experience mirrors real-world migrations:</p> <ol> <li>Discord - Migrated performance-critical services from Go to Rust</li> <li>Dropbox - Replaced Python components with Rust for better performance</li> <li>Facebook - Uses Rust for source control and other infrastructure</li> <li>Microsoft - Adopting Rust for systems programming projects</li> </ol>"},{"location":"summary/#industry-trends","title":"Industry Trends","text":"<ul> <li>Systems Programming: Rust replacing C/C++ in many domains</li> <li>Web Services: Growing adoption for high-performance APIs</li> <li>Blockchain: Rust becoming dominant in blockchain development</li> <li>IoT/Embedded: Rust gaining traction for resource-constrained devices</li> </ul>"},{"location":"summary/#best-practices-learned","title":"Best Practices Learned","text":""},{"location":"summary/#migration-strategy","title":"Migration Strategy","text":"<ol> <li>Start Small</li> <li>Begin with isolated components</li> <li>Validate each step thoroughly</li> <li> <p>Build confidence incrementally</p> </li> <li> <p>Maintain Compatibility</p> </li> <li>Preserve existing API contracts</li> <li>Ensure behavioral equivalence</li> <li> <p>Plan for gradual rollout</p> </li> <li> <p>Leverage AI Assistance</p> </li> <li>Use Copilot for learning new patterns</li> <li>Generate boilerplate code efficiently</li> <li>Validate approaches with AI guidance</li> </ol>"},{"location":"summary/#development-workflow","title":"Development Workflow","text":"<ol> <li>Test-First Approach</li> <li>Write tests before implementation</li> <li>Use tests as specification</li> <li> <p>Validate migration correctness</p> </li> <li> <p>Iterative Development</p> </li> <li>Small, incremental changes</li> <li>Frequent compilation and testing</li> <li> <p>Early feedback and correction</p> </li> <li> <p>Performance Validation</p> </li> <li>Benchmark throughout development</li> <li>Compare with original implementation</li> <li>Optimize based on measurements</li> </ol>"},{"location":"summary/#next-steps-for-your-journey","title":"Next Steps for Your Journey","text":""},{"location":"summary/#immediate-actions","title":"Immediate Actions","text":"<ol> <li>Practice Regularly</li> <li>Work through Rust exercises</li> <li>Contribute to open source projects</li> <li> <p>Build personal projects</p> </li> <li> <p>Deepen Knowledge</p> </li> <li>Study advanced Rust concepts</li> <li>Explore ecosystem crates</li> <li> <p>Learn performance optimization</p> </li> <li> <p>Share Experience</p> </li> <li>Write about your learnings</li> <li>Present at meetups or conferences</li> <li>Mentor others learning Rust</li> </ol>"},{"location":"summary/#long-term-development","title":"Long-term Development","text":"<ol> <li>Specialization Areas</li> <li>Web development with Rust</li> <li>Systems programming</li> <li>Game development</li> <li>Blockchain/cryptocurrency</li> <li> <p>Embedded systems</p> </li> <li> <p>Advanced Topics</p> </li> <li>Unsafe Rust and FFI</li> <li>Procedural macros</li> <li>Async programming patterns</li> <li> <p>Performance optimization</p> </li> <li> <p>Community Involvement</p> </li> <li>Contribute to Rust projects</li> <li>Participate in RFC discussions</li> <li>Join working groups</li> <li>Attend Rust conferences</li> </ol>"},{"location":"summary/#challenges-and-solutions","title":"Challenges and Solutions","text":""},{"location":"summary/#common-migration-challenges","title":"Common Migration Challenges","text":"<ol> <li>Learning Curve</li> <li>Challenge: Rust's unique concepts (ownership, borrowing)</li> <li> <p>Solution: Practice with small projects, use Copilot for guidance</p> </li> <li> <p>Performance Expectations</p> </li> <li>Challenge: Expecting immediate performance gains</li> <li> <p>Solution: Profile and optimize iteratively</p> </li> <li> <p>Ecosystem Maturity</p> </li> <li>Challenge: Finding equivalent libraries</li> <li>Solution: Evaluate alternatives, contribute to ecosystem</li> </ol>"},{"location":"summary/#solutions-applied","title":"Solutions Applied","text":"<ul> <li>Used GitHub Copilot for accelerated learning</li> <li>Applied systematic testing for validation</li> <li>Leveraged community resources and documentation</li> <li>Focused on incremental progress</li> </ul>"},{"location":"summary/#impact-assessment","title":"Impact Assessment","text":""},{"location":"summary/#technical-benefits-achieved","title":"Technical Benefits Achieved","text":"<ol> <li>Performance Improvements</li> <li>Faster response times</li> <li>Lower memory usage</li> <li> <p>Better resource utilization</p> </li> <li> <p>Safety Enhancements</p> </li> <li>Compile-time error detection</li> <li>Memory safety guarantees</li> <li> <p>Thread safety assurance</p> </li> <li> <p>Maintainability Gains</p> </li> <li>Strong type system</li> <li>Clear error handling</li> <li>Excellent tooling support</li> </ol>"},{"location":"summary/#skills-developed","title":"Skills Developed","text":"<ul> <li>Cross-language development capabilities</li> <li>AI-assisted programming proficiency</li> <li>Systems thinking and architecture</li> <li>Performance optimization mindset</li> </ul>"},{"location":"summary/#final-thoughts","title":"Final Thoughts","text":"<p>This workshop has equipped you with:</p> <ul> <li>Practical migration experience that applies to real-world projects</li> <li>Rust programming skills for building high-performance applications</li> <li>AI-assisted development techniques for accelerated learning and productivity</li> <li>System design understanding for building robust applications</li> </ul>"},{"location":"summary/#key-takeaways","title":"Key Takeaways","text":"<ol> <li>Migration is systematic - Success comes from careful planning and incremental execution</li> <li>AI accelerates learning - GitHub Copilot can significantly speed up skill acquisition</li> <li>Rust offers unique benefits - Memory safety and performance make it compelling for many use cases</li> <li>Testing ensures success - Comprehensive testing validates migration correctness</li> <li>Community matters - Leveraging resources and contributing back strengthens the ecosystem</li> </ol>"},{"location":"summary/#your-rust-journey-continues","title":"Your Rust Journey Continues","text":"<p>Remember that this workshop is just the beginning. Rust is a powerful language with a growing ecosystem and passionate community. Continue learning, building, and contributing to become part of the Rust success story.</p> <p>Whether you migrate existing systems or build new ones, the skills you've developed here will serve you well in creating fast, safe, and reliable software.</p> <p>Welcome to the Rust community! \ud83e\udd80</p>"},{"location":"summary/#resources-for-continued-learning","title":"Resources for Continued Learning","text":"<ul> <li>The Rust Book</li> <li>Rust by Example</li> <li>Rustlings</li> <li>This Week in Rust</li> <li>Rust Users Forum</li> <li>Official Rust Blog</li> </ul> <p>Keep building, keep learning, and keep migrating! \ud83d\ude80</p>"},{"location":"understanding-project/","title":"Understanding the Project","text":"<p>Before we start migrating code, it's crucial to understand what we're working with.</p>"},{"location":"understanding-project/#start-with-the-python-project","title":"Start with the Python Project","text":"<p>Familiarize yourself with the project and its structure. The main file is <code>main.py</code>, which contains the main logic of the application. Try to run it and see what the endpoints are.</p>"},{"location":"understanding-project/#1-explore-the-project","title":"1. Explore the project","text":"<p>Try using GitHub Copilot in Ask Mode for this step.</p> <p>First, open GitHub Copilot by pressing <code>Ctrl + Alt + I</code> if you are on Windows, or <code>Command + Shift + I</code> if you are on Mac, and ensure you are in Ask Mode:</p> <p></p> <p>Use the <code>#codebase</code> tool to provide context to Copilot and explain what is going on with this project.</p> <ul> <li>Open GitHub Copilot Chat and prefix your prompt with <code>#codebase</code></li> <li>Ask questions like how to run the project</li> </ul> Tip  ##### Prompt (Ask Mode)  <pre><code>#codebase provide me a detailed summary of what this Python project is about\n</code></pre>"},{"location":"understanding-project/#2-determine-the-api-endpoints","title":"2. Determine the API endpoints","text":"<p>Try using GitHub Copilot in Ask Mode for this step.</p> <p>Launch your project and run the web application. Use GitHub Copilot chat with the <code>main.py</code> file open, or type <code>#main.py</code> to provide context and ask about the endpoints.</p> <ul> <li>Try to run the project based on the suggestions of Copilot</li> <li>See all the possible endpoints and their requests types</li> </ul>"},{"location":"understanding-project/#3-explore-and-run-the-shell-tests","title":"3. Explore and run the shell tests","text":"<p>Try using GitHub Copilot in Agent Mode for this step.</p> <p>Tests are provided in the <code>tests</code> directory. Open the <code>test_endpoints.sh</code> file and use it to run tests. It requires the Python application to be running. Run the tests and inspect the output.</p> <ul> <li>Ask GitHub Copilot if more tests can be added</li> <li>If any tests are not currently passing, make sure they are updated</li> </ul> <p>[!NOTE] The application must be running for the tests to pass. If the app is not running you will get http errors. You can ask GitHub Copilot in Agent Mode for help to run the application and gain insights on how to start it.</p>"},{"location":"validate-correctness/","title":"Validate Correctness","text":""},{"location":"validate-correctness/#9-validate-correctness","title":"9. Validate correctness","text":"<p>Once you have all endpoints in Rust with passing tests, then you can ask Copilot to do a review of the whole file. Identify potential caveats and issues or performance problems. For example, imagine if every endpoint is serializing the file every time. This is a performance issue and you can ask Copilot to identify it.</p> Tip  ##### Prompt (Agent Mode)  <pre><code>Identify any potential problems with my main.rs file. Specifically I am\ninterested in understanding redundancy and any code that is doing unnecessary\nwork. Do not generate any code, just explain.\n</code></pre>"},{"location":"validate-correctness/#10-add-more-endpoints-with-tests","title":"10. Add more endpoints with tests","text":"<p>Finally, you have a 1:1 mapping of the Python project to the Rust project. Now you can start adding more endpoints and tests. For example the <code>/countries/{country}</code> endpoint. This endpoint is not present in the Python project, but you can add it to the Rust project.</p> <ul> <li>With the <code>main.rs</code> file open, ask Copilot about other possible endpoints</li> <li>Open the <code>test_endpoints.sh</code> file and ask Copilot to add more tests for the new endpoints</li> <li>Run the tests to ensure they are passing, fix any issues that arise</li> </ul> Tip  ##### Prompt (Agent Mode)  <pre><code>The Rust API now has full parity with the Python application, but I want you to\nsuggest me other potential endpoints that might be useful like\n/countries/{country} . Make sure you update the test_endpoints.sh file as well.\n</code></pre>"},{"location":"workshop-introduction/","title":"Workshop Introduction","text":""},{"location":"workshop-introduction/#migrating-zavas-temperature-api-from-python-to-rust","title":"Migrating Zava's Temperature API from Python to Rust","text":"<p>As part of Zava's business goals, the company is expanding their cutting-edge smart fiber technology to a wider array of retail products. Zava specializes in heat-resistant materials that adapt to various climate conditions, and their current temperature/season/location API serves as a critical backend service for these innovative products.</p> <p>To support this expansion and ensure enterprise-level reliability, Zava needs to migrate their existing Python-based temperature API to Rust. This migration will provide enhanced security through Rust's memory safety features, improved performance with zero-cost abstractions, and better scalability to handle the increased demand from retail market integration. The API currently provides historical weather data across multiple countries, cities, and months - data that's essential for Zava's smart fiber products to perform optimally in different environmental conditions.</p> <p>This workshop will guide you through the complete migration process using GitHub Copilot, demonstrating how AI-assisted development can streamline the transition from Python to Rust while maintaining full API compatibility and improving overall system robustness.</p> <p>Let's go through some challenging requests for GitHub Copilot and address them as they happen.</p> <p>[!NOTE] This repo is intended to give an introduction to various GitHub Copilot features, such as Copilot Chat and inline chat within VS Code. Hence the step-by-step guides below contain the general description of what needs to be done, and Copilot Chat or inline chat can support you in generating the necessary commands.</p> <p>Each step (where applicable) also contains a <code>Cheatsheet</code> which can be used to validate the Copilot suggestion(s) against the correct command.</p> <p>\ud83d\udca1 Play around with different prompts and see how it affects the accuracy of the GitHub Copilot suggestions. For example, when using inline chat, you can use an additional prompt to refine the response without having to rewrite the whole prompt.</p>"},{"location":"workshop-introduction/#workshop-features","title":"Workshop features","text":"<p>You will be working with a Python project that has an HTTP API. This project needs to be migrated and your main task will be to migrate it over using the Rust programming language. Here are some features:</p> <ol> <li>Run the web application and open up the browser</li> <li>Use the /docs endpoint in the running app to see the endpoints</li> <li>All dependencies and libraries are pre-installed for Python</li> <li>An initial test file in BASH is provided to validate correctness</li> </ol>"},{"location":"workshop-introduction/#github-copilot-modes","title":"GitHub Copilot Modes","text":"<p>GitHub Copilot offers three distinct modes: Ask, Edit and Agent, each designed to enhance your coding workflow in unique ways. These modes cater to different levels of assistance, from answering questions to autonomously managing complex tasks.</p>"},{"location":"workshop-introduction/#ask-mode","title":"Ask Mode","text":"<p>Ask Mode is a Q&amp;A assistant that helps you understand code, solve problems or learn concepts. It allows you to ask questions in natural language, and Copilot responds with explanations, snippets or suggestions. It does not directly modify any code. </p> <p>Ask mode works best for quick clarifications, brainstorming solutions and providing sample implementations.</p>"},{"location":"workshop-introduction/#edit-mode","title":"Edit Mode","text":"<p>Edit Mode enables direct code modifications based on natural language instructions. You can highlight specific code blocks or files, describe the desired changes, and Copilot will propose edits. These changes are presented as diffs for your review, ensuring you retain control over the final implementation.</p> <p>Try Edit mode in targeted updates, such as refactoring or adding error handling.</p>"},{"location":"workshop-introduction/#agent-mode","title":"Agent Mode","text":"<p>Agent Mode is the most autonomous and powerful of the three. It allows Copilot to analyze your entire project, plan tasks, make edits, run commands, and iterate until the goal is achieved. This mode is ideal for multi-step tasks, such as building features, fixing bugs, or scaffolding new components. While Agent mode automates much of the process, it still surfaces potentially risky actions for your approval, ensuring safety and correctness.</p>"}]}