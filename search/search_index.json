{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WRK541 - Real World Code Migration with GitHub Copilot Agent Mode","text":""},{"location":"#perform-a-challenging-migration-to-a-completely-different-language","title":"Perform a challenging migration to a completely different language","text":"<ul> <li>Who is this for: Any technologist that is looking to apply AI pair-programming techniques with GitHub Copilot to perform challenging work like migrating or translating from one programming language to another.</li> <li>What you'll learn: You'll use advanced GitHub Copilot techniques that are specifically useful when translating projects in different programming languages, as well as the different modes GitHub Copilot has to offer.</li> <li>What you'll work on: An HTTP API used to gather seasonal weather data that uses Rust with full compatibility from the original HTTP API written in Python.</li> </ul>"},{"location":"#learning-objectives","title":"Learning Objectives","text":"<p>In this workshop, you will:</p> <ul> <li>Learn the differences about each of the GitHub Copilot Modes, when to use each one, best practices and tools to help you get the most out of your interactions.</li> <li>Understand the differences between Python and Rust for web development</li> <li>Learn the key differences in syntax, libraries, and frameworks when transitioning from Python's FastAPI to Rust's actix-web.</li> <li>Implement JSON Serialization and Deserialization in Rust.</li> <li>Gain hands-on experience using the serde library to handle JSON data, ensuring compatibility with the original Python API.</li> <li>Develop and Validate Incremental Endpoints in Rust.</li> <li>Practice creating and testing individual endpoints iteratively, ensuring correctness and alignment with the original Python API.</li> <li>Optimize Performance and Identify Bottlenecks in Rust: Learn to analyze and address potential performance issues, such as redundant file serialization, while building a production-ready Rust application.</li> </ul>"},{"location":"#prerequisites","title":"\ud83d\udce3 Prerequisites","text":"<p>Before joining the workshop, there is only one prerequisite: you must have your own GitHub account. All resources, dependencies, and data are part of the repository itself. Make sure you have your GitHub Copilot license, trial, or the free version.</p> <p>Let's get started by clicking on the Next Button on the bottom right corner that reads \"Workshop Navigation\".</p>"},{"location":"Challenge-1/","title":"Bonus Challenges","text":"<p>Ready for an extra challenge? This section presents advanced scenarios that will push the boundaries of what you have so far accomplished.</p>"},{"location":"Challenge-1/#challenge-1-containerizing-the-project","title":"Challenge 1: Containerizing the project","text":"<p>Containerize this project so that users can run it in other environments without having to install and compile dependencies.</p> <p>You can start with Agent mode to create the Dockerfile, then switch over to Edit mode when making updates to the Dockerfile. Finally, switch over to Agent mode to get guidance verifying the container.</p> <ol> <li>Ask Copilot to help you generate a Dockerfile to containerize the Rust    project</li> <li>Review the Dockerfile created, optionally switch to Edit mode to make    specific changes to the file</li> <li>Use Agent mode to verify the container builds and can run</li> </ol> <p>Make adjustments as needed to ensure the container works.</p>"},{"location":"Challenge-2/","title":"Bonus Challenges","text":""},{"location":"Challenge-2/#challenge-2-creating-a-makefile-to-interact-with-the-rust-project","title":"Challenge 2: Creating a Makefile to interact with the Rust project.","text":"<p>You may have a <code>Makefile</code> already created by Copilot as part of this workshop. If that is the case, just make the updates necessary, otherwise create a new one.</p> <p>Create a useful <code>Makefile</code> to make it easier to interact with the Rust project. Use GitHub Copilot in Agent mode for this challenge. Use Agent mode to achieve the following:</p> <ol> <li>Create a Makefile with build, build-container, test, and run targets</li> <li>Make the <code>Makefile</code> produce a useful help menu when no targets are passed in</li> <li>Explore additional targets like release-build and similar that GitHub    Copilot might suggest in Ask mode</li> </ol>"},{"location":"Homework/","title":"Homework","text":"<p>Congratulations on completing the workshop! To solidify your learning and explore additional concepts, here are some homework exercises and extended projects.</p>"},{"location":"Homework/#take-home-challenge-deploying-the-application-on-azure","title":"Take Home Challenge: Deploying the application on Azure","text":"<p>If you have achieved all previous steps including the containerization, try deploying your application on Azure. For this you will need an Azure account and the GitHub Copilot for Azure extension which will help you ask questions and get guidance for deployment.</p> <p></p> <ol> <li>Use <code>@azure</code> after signing into your Azure account to ask how to deploy the    containerized Rust application</li> <li>Use one of the suggested services for deployment, for example, Azure    Container Apps, to deploy the container</li> <li>Verify your container is deployed and working</li> </ol> <p>By the end, ensure you cleanup and remove any and all resources to prevent unneeded cloud charges to your account.</p>"},{"location":"add-more-endpoints-tests/","title":"Add More Endpoints and Tests","text":""},{"location":"add-more-endpoints-tests/#11-finalizing-the-project-with-rust-tests","title":"11. Finalizing the project with Rust tests","text":"<p>Now that you have all the endpoints and tests passing, you can now use Rust tests to validate the correctness. The shell tests were good enough to validate both Python and Rust by using the HTTP API. But now you can use Rust tests to validate the correctness of the Rust project using its own tests.</p> <ul> <li>Ask Copilot where you can add tests for the Rust project. Tests can go in the same <code>main.rs</code> file or in a separate file.</li> <li>Ask how to run the tests for validation</li> <li>Only add one test a time and validate it. This is the same process as before and will help you concentrate in one thing at a time.</li> </ul> Tip <p>Prompt (Agent Mode)</p> <pre><code>Now that we have all endpoints in Rust I want native Rust unit tests. Add them\nto main.rs so that I can verify correctness without having to use the BASH file\n</code></pre> <p>You should have a fully operating Rust application that is well tested by now. If you are reaching this point, congratulations! You can try achieving these tasks before time runs out or try them on your own time later.</p>"},{"location":"analyze-project/","title":"Analyze the Project","text":""},{"location":"analyze-project/#4-strategize-with-github-copilot","title":"4. Strategize with GitHub Copilot","text":"<p>Try using GitHub Copilot in Ask Mode for this step.</p> <p>Now that you have a good understanding of the project, you can start strategizing with GitHub Copilot. Using Ask Mode, ask questions about why the tests might be a good idea when rewriting the project in Rust.</p> <ul> <li>Ask GitHub Copilot to provide a summary of the tests</li> <li>Ask for suggestions on how to properly rewrite this project in Rust</li> </ul> <p>Note</p> <p>Sometimes, GitHub Copilot may be eager to provide a lot of information including whole files with code. This is probably not what you want when trying to think about your options. Ensure you tell Copilot to avoid generating code when brainstorming and strategizing.</p> Tip <p>Prompt (Ask Mode)</p> <pre><code>#codebase why are these tests using BASH a good idea if I want to rewrite the\napplication from Python to Rust?\n</code></pre>"},{"location":"analyze-project/#5-identify-missing-tests","title":"5. Identify missing tests","text":"<p>For this step you can use either Edit Mode or Agent Mode.</p> <p>The tests are not complete and there are some missing cases. Use GitHub Copilot to identify the missing tests. This will help you get full coverage of the application before you start rewriting it in Rust.</p> <p>For this step, you can use either Edit Mode or Agent Mode.</p> <ul> <li>Open the test file and ask GitHub Copilot to identify missing tests</li> <li>Implement the missing tests</li> <li>Run the tests to ensure they are passing, fix any issues that arise</li> </ul> Tip <p>Prompt (Edit Mode)</p> <pre><code>Add any missing tests for the endpoints. There are missing cases. Help me get\ncoverage\n</code></pre> <p>Prompt (Agent Mode)</p> <pre><code>Help me run the tests using the BASH file and check that they pass. In case of\nfailure, help me address the failures to get the tests passing\n</code></pre>"},{"location":"cloning-repository/","title":"Cloning the Repository","text":"<ol> <li>Visit the repository: Real World Code Migration with GitHub Copilot Agent Mode|</li> <li>Log into your GitHub account.</li> <li>Click the Star button in the top right corner, this will help you easily find it later.</li> <li> <p>Click on the &lt;&gt; Code button, followed by the Local tab, then the Copy to Clipboard button next to the repository's web URL.</p> <p></p> </li> <li> <p>Open VS Code.</p> </li> <li>Open a Terminal by pressing <code>CTRL + Shift + `</code> on Windows or Linux, or <code>^ + \u21e7 + `</code> on Mac. (You may also do this via the Menu, by clicking Terminal followed by New Terminal)</li> <li>Type <code>git clone https://github.com/microsoft/aitour26-WRK541-the-github-copilot-lab-for-devs-who-think-ai-is-still-all-hype.git</code> in the Terminal, then press Enter.</li> <li>Wait for it to clone!</li> </ol> <p>Success</p> <p>To revisit the workshop later, click your profile picture on GitHub and select Your stars.</p>"},{"location":"create-rust-scaffolding/","title":"Create Rust Scaffolding","text":"<p>You should use GitHub Copilot in Agent Mode for this step and onwards.</p> <p>Now that you have a good understanding of the project and its tests, you can start creating the Rust scaffolding. You will start by creating a special file with instructions. This file is called Copilot Instructions and it should live in the root of the current repository. We've pre-created an empty file for you so all that is needed is to fill it out with new instructions.</p> <p>For this step, open the <code>.github/copilot-instructions.md</code> file and add the following:</p> <pre><code>Whenever you are providing suggestions for a Rust project always use the\nactix-web framework using serde for serialization\n</code></pre> Warning <p>Creating a new instance of chat at this point can prove useful. It will clear some of the previous context and allow for GitHub Copilot to start fresh. If you wish to do so, all you need to do is click the  button at the top of Copilot's chat window.</p> <p>As we will carry out a more complex set of tasks, we will move on from Edit Mode and solely work in Agent Mode. Once you have switched, ask GitHub Copilot to create the scaffolding necessary for your Rust project. Ask GitHub Copilot to give you a step by step to start the project and the commands to run to get started.</p> Tip <p>Prompt (Agent Mode)</p> <p><code>#codespace create the Rust scaffolding to begin migrating the project and provide me with guided steps to run the project afterwards.</code></p> <p>The framework and the serializer should automatically be included without you having to specify it. This file can be used for any other instruction you don't want to repeat.</p> <p>Why might some dependencies not work as expected? </p> <p>Because LLMs sometimes don't have correct versions and tend to provide probabilistic results, not exact ones like a database would. Ensure that the versions used and installed will work and are correct.</p>"},{"location":"implementing-endpoints/","title":"Implementing Endpoints","text":"<p>Now that you have the scaffolding, you can start creating a single endpoint. Use Copilot to suggest the first pass for the <code>main.rs</code> file that will hold your first endpoint. Ensure that Copilot understands that it shouldn't generate the whole file, but only the main <code>/</code> endpoint.</p>"},{"location":"implementing-endpoints/#6-create-a-single-endpoint","title":"6. Create a single endpoint","text":"<ul> <li>Open the <code>main.rs</code> file and ask Copilot to generate only the <code>/</code> endpoint</li> </ul> <p>Note</p> <p>You might be tempted to ask Copilot to generate the whole file, but you must validate each part as you make progress. It is easier to validate smaller parts than a whole file with multiple endpoints and logic.</p> Tip <p>Prompt (Agent Mode)</p> <pre><code>#codebase add the root of the API only. This is the '/' endpoint, do not\ngenerate other endpoints yet, focus only on the single root endpoint for now.\n</code></pre>"},{"location":"implementing-endpoints/#7-validate-your-first-rust-endpoint","title":"7. Validate your first Rust endpoint","text":"<p>Now that you have the first endpoint in Rust, it is time to validate. This process of creating code and validating it is iterative and a solid practice when you need to develop a new project. It is even more crucial now that you are rewriting a project in a new language.</p> <ul> <li>Make sure the Python project is no longer running</li> <li>Ask Copilot help to run the Rust project in the same address and port as the Python project so that tests can run</li> <li>Run the tests to ensure they are passing, fix any issues that arise</li> </ul> Tip <p>Prompt (Agent Mode)</p> <pre><code>Run the Rust project in the same address and port as the Python one. Make sure\nthe Python API is no longer running. Then, run the BASH tests so that I can\nverify the first endpoint in Rust is working. Only focus on the \"/\" endpoint\nfor now\n</code></pre>"},{"location":"implementing-endpoints/#8-continue-with-all-other-endpoints","title":"8. Continue with all other endpoints","text":"<p>Use the same process as above to create all other endpoints. Add a single endpoint at a time, validate it, and run the tests.</p> <p>For the JSON file, you will need to serialize and use <code>serde</code>. If you aren't familiar with this process you will have to rely on Copilot guidance. Ensure that you generate the smallest possible code and validate it immediately.</p> <p>Validating smaller parts of the code is easier than validating a whole file. It is also easier to debug smaller parts of the code. This is a good practice when using GitHub Copilot and it will help you in the long run.</p>"},{"location":"navigating-workshop/","title":"Workshop Navigation","text":"<p>Take a moment to familiarize yourself with the workshop document layout:</p>"},{"location":"navigating-workshop/#page-navigation-elements","title":"Page Navigation Elements","text":"<ul> <li>The main navigation menu on the left side contains links to all sections of the documentation.</li> <li>The control panel at the top allows you to search for specific topics or keywords, switch between light and dark themes, and access different language versions of the documentation.</li> <li>Link to the GitHub repository for this workshop is available in the top right corner.</li> <li>Navigation links at the bottom of each page for the next/previous pages.</li> </ul>"},{"location":"navigating-workshop/#expanding-an-image","title":"Expanding an Image","text":"<p>To view images in the documentation at a larger size, you can click on them. This will open the image in a new tab, allowing you to see more detail.</p> <p></p>"},{"location":"navigating-workshop/#copying-code-snippets","title":"Copying Code Snippets","text":"<p>To make the most of the workshop, you will often need to text code snippets from the documentation.</p> <p>The text snippets are highlighted in gray boxes throughout the documentation. You can copy the text by clicking the copy icon that appears when you hover over the right side of the snippet.</p> <pre><code># Example text snippet\n</code></pre>"},{"location":"navigating-workshop/#understanding-the-different-notes-across-the-workshop","title":"Understanding the different notes across the workshop.","text":"<p>Tips like this showcase useful and quick insights or suggestions.</p> <p>Note</p> <p>Notes highlight important information about the topic at hand</p> Tip (click to expand) <p>These tips are clickable, and provide a suggested code/prompt to help you move forward.</p> <p>Warning</p> <p>Warnings are complimentary to instructions, and must be paid attention to in order to achieve the desired results as you progress.</p> <p>Bug</p> <p>Bugs like these explain why certain things may not go according to plan, such as dependencies or the non-deterministic nature of working with AI models and Agents.</p>"},{"location":"resources/","title":"Resources","text":""},{"location":"resources/#placeholder-to-be-completed","title":"Placeholder, to be completed","text":"<p>This page provides a comprehensive collection of resources to support your learning journey and help you become proficient in Rust development and code migration.</p>"},{"location":"resources/#official-rust-resources","title":"Official Rust Resources","text":""},{"location":"resources/#core-documentation","title":"Core Documentation","text":"<ul> <li>The Rust Programming Language Book - The definitive guide to Rust</li> <li>Rust by Example - Learn Rust through practical examples</li> <li>The Rust Reference - Detailed language specification</li> <li>The Rustonomicon - Advanced unsafe Rust guide</li> <li>Standard Library Documentation - Complete API reference</li> </ul>"},{"location":"resources/#learning-resources","title":"Learning Resources","text":"<ul> <li>Rustlings - Interactive Rust exercises</li> <li>Rust Cookbook - Common programming patterns</li> <li>Rust API Guidelines - Best practices for API design</li> </ul>"},{"location":"summary/","title":"Summary","text":""},{"location":"summary/#congratulations-you-have-completed-this-workshop","title":"Congratulations! You have completed this workshop.","text":"<p>This workshop walked through a realistic, end\u2011to\u2011end migration of a small Python (FastAPI) HTTP service into a Rust web service, using GitHub Copilot as an AI pair\u2011programmer across its three modes (Ask, Edit, Agent). The focus was on disciplined, incremental migration, test\u2011driven validation, and leveraging AI responsibly (small diffs, continuous feedback, explicit validation).</p>"},{"location":"summary/#story-goal","title":"Story &amp; Goal","text":"<p>You acted as an engineer at \"Zava\" migrating a temperature / seasonal lookup API from Python to Rust to gain performance, safety, and future scalability. The original Python service exposed multiple HTTP endpoints backed by static JSON data. The objective: reproduce equivalent behavior in Rust while preserving API compatibility and strengthening test coverage and maintainability.</p>"},{"location":"summary/#highlevel-phases","title":"High\u2011Level Phases","text":"<ol> <li>Orientation &amp; Navigation<ul> <li>Reviewed repository layout and documentation pages.</li> <li>Used Ask Mode with <code>#codebase</code> to summarize project purpose &amp; structure.</li> </ul> </li> <li>Understanding the Python Service<ul> <li>Inspected <code>main.py</code> and enumerated available endpoints via the interactive <code>/docs</code> UI.</li> <li>Confirmed runtime (FastAPI + uvicorn) and data sources (embedded JSON file).</li> </ul> </li> <li>Baseline Validation<ul> <li>Ran the provided shell test script (<code>tests/test_endpoints.sh</code>) against the Python service.</li> <li>Identified existing coverage gaps and clarified desired behavior per endpoint.</li> </ul> </li> <li>Test Strategy Enhancement<ul> <li>Brainstormed (Ask Mode) why black\u2011box HTTP tests are valuable for cross\u2011language parity.</li> <li>Added/adjusted missing or edge\u2011case tests (Edit / Agent Modes) to lock in expected responses before migration.</li> </ul> </li> <li>Migration Planning<ul> <li>Outlined incremental approach: scaffold Rust project \u2192 add one endpoint at a time \u2192 re\u2011run shared tests \u2192 only then proceed.</li> <li>Captured persistent guidance in <code>.github/copilot-instructions.md</code> (e.g., prefer <code>actix-web</code> or similar + <code>serde</code>).</li> </ul> </li> <li>Rust Scaffolding<ul> <li>Generated initial Cargo project structure via Agent Mode guidance.</li> <li>Added dependencies for web framework, async runtime, and serialization.</li> </ul> </li> <li>First Endpoint Implementation<ul> <li>Implemented only the root (<code>/</code>) endpoint in <code>main.rs</code> to validate toolchain, build, execution, and test harness integration.</li> <li>Ensured the Rust service listened on the same host/port so existing shell tests could run unmodified.</li> </ul> </li> <li>Iterative Endpoint Porting<ul> <li>Migrated each remaining Python endpoint one at a time (strict minimal diff prompting).</li> <li>Introduced JSON loading &amp; <code>serde</code> data models mirroring Python structures.</li> <li>After each addition: compile, run, execute shell tests, resolve discrepancies early.</li> </ul> </li> <li>Native Rust Testing<ul> <li>Added Rust unit/integration tests to complement the external black\u2011box shell tests, enabling faster inner\u2011loop validation.</li> </ul> </li> <li>Quality &amp; Parity Validation<ul> <li>Confirmed all previously defined shell tests passed against the Rust implementation.</li> <li>Reviewed error handling, serialization consistency, and response status codes.</li> </ul> </li> <li>Bonus Challenges (Optional Exploration)<ul> <li>Containerization: Authored &amp; refined a multi\u2011stage Dockerfile for lean release images.</li> <li>Makefile: Added ergonomic targets (build, run, test, release, container build) plus a help banner to streamline workflows.</li> </ul> </li> <li>Resource &amp; Skill Expansion<ul> <li>Consulted curated resource lists for Rust web development, testing, async patterns, performance, and migration best practices.</li> </ul> </li> </ol>"},{"location":"summary/#github-copilot-usage-patterns","title":"GitHub Copilot Usage Patterns","text":"Mode Purpose in Workshop Examples Ask Discovery, explanations, brainstorming without large code dumps Summarize codebase, identify missing tests Edit Targeted diff-based modifications Adding specific tests, refining Dockerfile / Makefile snippets Agent Multi-step orchestration: scaffolding, executing commands, iterative endpoint migration Creating Rust project, running tests after each endpoint <p>Key prompting techniques included: scoping requests narrowly (\u201conly add the root endpoint\u201d), reinforcing partial generation, and iterative refinement rather than requesting monolithic files.</p>"},{"location":"summary/#engineering-practices-emphasized","title":"Engineering Practices Emphasized","text":"<ul> <li>Incremental migration (avoid big-bang rewrites)</li> <li>Test-first parity (lock behavior before porting)</li> <li>Dual-layer validation (external HTTP tests + internal Rust unit tests)</li> <li>Minimal diff prompting to reduce hallucinations and review effort</li> <li>Frequent run/feedback cycles to catch integration issues early</li> </ul>"},{"location":"summary/#outcomes-achieved","title":"Outcomes Achieved","text":"Area Result Functional Parity All Python endpoints replicated in Rust with matching responses Test Coverage Enhanced shell tests + new Rust tests for faster feedback Reliability Safer memory model &amp; clearer types via Rust + <code>serde</code> Developer UX Makefile + container image for consistent local &amp; portable runs AI Leverage Demonstrated productive Copilot usage patterns across modes"},{"location":"summary/#lessons-learned","title":"Lessons Learned","text":"<ol> <li>Small validated increments reduce debugging complexity vs. full-file generation.</li> <li>Shared black-box tests accelerate cross-language parity checks.</li> <li>Persisting architectural instructions (copilot-instructions) aligns future AI suggestions.</li> <li>Native tests complement external parity tests for faster iteration.</li> <li>Containerization and automation (Makefile) improve reproducibility post-migration.</li> </ol>"},{"location":"summary/#suggested-next-steps","title":"Suggested Next Steps","text":"<p>Take a look at the Bonus Content Section! We have laid down some bonus challenges to take this project further.</p>"},{"location":"summary/#final-reflection","title":"Final Reflection","text":"<p>You practiced a pragmatic, test-driven, AI-augmented migration path. By constraining Copilot to precise, reviewable changes and validating continuously, you achieved reliable parity while improving the operational and performance posture of the service. This mirrors real-world modernization efforts where correctness, safety, and maintainability must advance together.</p> <p>Happy shipping\u2014and keep iterating with purpose! \ud83e\udd80</p>"},{"location":"understanding-project/","title":"Understanding the Project","text":"<p>Before we start migrating code, it's crucial to understand what we're working with.</p>"},{"location":"understanding-project/#start-with-the-python-project","title":"Start with the Python Project","text":"<p>Familiarize yourself with the project and its structure. The main file is <code>main.py</code>, which contains the main logic of the application. Try to run it and see what the endpoints are.</p>"},{"location":"understanding-project/#1-explore-the-project","title":"1. Explore the project","text":"<p>Try using GitHub Copilot in Ask Mode for this step.</p> <p>First, open GitHub Copilot by pressing <code>Ctrl + Alt + I</code> if you are on Windows, or <code>Command + Shift + I</code> if you are on Mac, and ensure you are in Ask Mode:</p> <p></p> <p>Use the <code>#codebase</code> tool to provide context to Copilot and explain what is going on with this project.</p> <ul> <li>Open GitHub Copilot Chat and prefix your prompt with <code>#codebase</code></li> <li>Ask questions like how to run the project</li> </ul> Tip <p>Prompt (Ask Mode)</p> <pre><code>#codebase provide me a detailed summary of what this Python project is about\n</code></pre>"},{"location":"understanding-project/#2-determine-the-api-endpoints","title":"2. Determine the API endpoints","text":"<p>Try using GitHub Copilot in Ask Mode for this step.</p> <p>Launch your project and run the web application. Use GitHub Copilot chat with the <code>main.py</code> file open, or type <code>#main.py</code> to provide context and ask about the endpoints.</p> <ul> <li>Try to run the project based on the suggestions of Copilot</li> <li>See all the possible endpoints and their requests types</li> </ul>"},{"location":"understanding-project/#3-explore-and-run-the-shell-tests","title":"3. Explore and run the shell tests","text":"<p>Try using GitHub Copilot in Agent Mode for this step.</p> <p>Tests are provided in the <code>tests</code> directory. Open the <code>test_endpoints.sh</code> file and use it to run tests. It requires the Python application to be running. Run the tests and inspect the output.</p> <ul> <li>Ask GitHub Copilot if more tests can be added</li> <li>If any tests are not currently passing, make sure they are updated</li> </ul> <p>Warning</p> <p>The application must be running for the tests to pass. If the app is not running you will get http errors. You can ask GitHub Copilot in Agent Mode for help to run the application and gain insights on how to start it.</p>"},{"location":"validate-correctness/","title":"Validate Correctness","text":""},{"location":"validate-correctness/#9-validate-correctness","title":"9. Validate correctness","text":"<p>Once you have all endpoints in Rust with passing tests, then you can ask Copilot to do a review of the whole file. Identify potential caveats and issues or performance problems. For example, imagine if every endpoint is serializing the file every time. This is a performance issue and you can ask Copilot to identify it.</p> Tip <p>Prompt (Agent Mode)</p> <pre><code>Identify any potential problems with my main.rs file. Specifically I am\ninterested in understanding redundancy and any code that is doing unnecessary\nwork. Do not generate any code, just explain.\n</code></pre>"},{"location":"validate-correctness/#10-add-more-endpoints-with-tests","title":"10. Add more endpoints with tests","text":"<p>Finally, you have a 1:1 mapping of the Python project to the Rust project. Now you can start adding more endpoints and tests. For example the <code>/countries/{country}</code> endpoint. This endpoint is not present in the Python project, but you can add it to the Rust project.</p> <ul> <li>With the <code>main.rs</code> file open, ask Copilot about other possible endpoints</li> <li>Open the <code>test_endpoints.sh</code> file and ask Copilot to add more tests for the new endpoints</li> <li>Run the tests to ensure they are passing, fix any issues that arise</li> </ul> Tip <p>Prompt (Agent Mode)</p> <pre><code>The Rust API now has full parity with the Python application, but I want you to\nsuggest me other potential endpoints that might be useful like\n/countries/{country} . Make sure you update the test_endpoints.sh file as well.\n</code></pre>"},{"location":"workshop-introduction/","title":"Workshop Introduction","text":""},{"location":"workshop-introduction/#migrating-zavas-temperature-api-from-python-to-rust","title":"Migrating Zava's Temperature API from Python to Rust","text":"<p>As part of Zava's business goals, the company is expanding their cutting-edge smart fiber technology to a wider array of retail products. Zava specializes in heat-resistant materials that adapt to various climate conditions, and their current temperature/season/location API serves as a critical backend service for these innovative products.</p> <p>To support this expansion and ensure enterprise-level reliability, Zava needs to migrate their existing Python-based temperature API to Rust. This migration will provide enhanced security through Rust's memory safety features, improved performance with zero-cost abstractions, and better scalability to handle the increased demand from retail market integration. The API currently provides historical weather data across multiple countries, cities, and months - data that's essential for Zava's smart fiber products to perform optimally in different environmental conditions.</p> <p>This workshop will guide you through the complete migration process using GitHub Copilot, demonstrating how AI-assisted development can streamline the transition from Python to Rust while maintaining full API compatibility and improving overall system robustness.</p> <p>Let's go through some challenging requests for GitHub Copilot and address them as they happen.</p> <p>Note</p> <p>This repo is intended to give an introduction to various GitHub Copilot features, such as Copilot Chat and inline chat within VS Code. Hence the step-by-step guides below contain the general description of what needs to be done, and Copilot Chat or inline chat can support you in generating the necessary commands.</p> <p>Each step (where applicable) also contains a <code>Cheatsheet</code> which can be used to validate the Copilot suggestion(s) against the correct command.</p> <p>\ud83d\udca1 Play around with different prompts and see how it affects the accuracy of the GitHub Copilot suggestions. For example, when using inline chat, you can use an additional prompt to refine the response without having to rewrite the whole prompt.</p>"},{"location":"workshop-introduction/#workshop-features","title":"Workshop features","text":"<p>You will be working with a Python project that has an HTTP API. This project needs to be migrated and your main task will be to migrate it over using the Rust programming language. Here are some features:</p> <ol> <li>Run the web application and open up the browser</li> <li>Use the /docs endpoint in the running app to see the endpoints</li> <li>All dependencies and libraries are pre-installed for Python</li> <li>An initial test file in BASH is provided to validate correctness</li> </ol>"},{"location":"workshop-introduction/#github-copilot-modes","title":"GitHub Copilot Modes","text":"<p>GitHub Copilot offers three distinct modes: Ask, Edit and Agent, each designed to enhance your coding workflow in unique ways. These modes cater to different levels of assistance, from answering questions to autonomously managing complex tasks.</p>"},{"location":"workshop-introduction/#ask-mode","title":"Ask Mode","text":"<p>Ask Mode is a Q&amp;A assistant that helps you understand code, solve problems or learn concepts. It allows you to ask questions in natural language, and Copilot responds with explanations, snippets or suggestions. It does not directly modify any code. </p> <p>Ask mode works best for quick clarifications, brainstorming solutions and providing sample implementations.</p>"},{"location":"workshop-introduction/#edit-mode","title":"Edit Mode","text":"<p>Edit Mode enables direct code modifications based on natural language instructions. You can highlight specific code blocks or files, describe the desired changes, and Copilot will propose edits. These changes are presented as diffs for your review, ensuring you retain control over the final implementation.</p> <p>Try Edit mode in targeted updates, such as refactoring or adding error handling.</p>"},{"location":"workshop-introduction/#agent-mode","title":"Agent Mode","text":"<p>Agent Mode is the most autonomous and powerful of the three. It allows Copilot to analyze your entire project, plan tasks, make edits, run commands, and iterate until the goal is achieved. This mode is ideal for multi-step tasks, such as building features, fixing bugs, or scaffolding new components. While Agent mode automates much of the process, it still surfaces potentially risky actions for your approval, ensuring safety and correctness.</p> <p>Agent mode will carry out actions beyond just editing, such as writing code and creating new files. It is best used in tasks that imply more than just prompting for knowledge or editing single lines.</p>"},{"location":"workshop-introduction/#available-models","title":"Available Models","text":"<p>This workshop is model-agnostic, and as such we do not require learners to select a specific one during their work. However, it is worth noting that GitHub Copilot supports a variety of models (such as GPT-5, Claude Sonnet 4, Gemini, etc.) of varying capabilities. To learn more about GitHub Copilot and its different plans, visit the Resources section or visit this link: GitHub Copilot Plans</p>"}]}